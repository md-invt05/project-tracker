name: .NET CI

on:
  pull_request:
    branches:
      - dev

jobs:
  build_test_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'   # либо 8.0.x, если проект под .NET 8

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # Ищем .sln (если есть) — будем собирать именно его
      - name: Locate solution
        id: sln
        shell: bash
        run: |
          SLN=$(git ls-files '*.sln' | head -n 1 || true)
          echo "sln=$SLN" >> $GITHUB_OUTPUT
          echo "Found solution: $SLN"

      - name: Restore (solution)
        if: steps.sln.outputs.sln != ''
        run: dotnet restore "${{ steps.sln.outputs.sln }}"

      - name: Restore (projects)
        if: steps.sln.outputs.sln == ''
        shell: bash
        run: |
          set -e
          PROJS=$(git ls-files '**/*.csproj')
          for p in $PROJS; do
            echo "Restoring $p"
            dotnet restore "$p"
          done

      - name: Build (solution)
        if: steps.sln.outputs.sln != ''
        run: dotnet build "${{ steps.sln.outputs.sln }}" --configuration Release --no-restore

      - name: Build (projects)
        if: steps.sln.outputs.sln == ''
        shell: bash
        run: |
          set -e
          PROJS=$(git ls-files '**/*.csproj')
          for p in $PROJS; do
            echo "Building $p"
            dotnet build "$p" --configuration Release --no-restore
          done

      # Тесты: если есть .sln — тестируем решение; иначе ищем тест-проекты по маске
      - name: Test (solution) with coverage
        if: steps.sln.outputs.sln != ''
        run: |
          dotnet test "${{ steps.sln.outputs.sln }}" \
            --configuration Release \
            --no-build \
            --collect:"XPlat Code Coverage" \
            --logger "trx;LogFileName=tests.trx"

      - name: Test (projects) with coverage
        if: steps.sln.outputs.sln == ''
        shell: bash
        run: |
          set -e
          TESTS=$(git ls-files '*Test*.csproj' '*Tests*.csproj' || true)
          if [ -z "$TESTS" ]; then
            echo "No test projects found — skipping tests."; exit 0
          fi
          for t in $TESTS; do
            echo "Testing $t"
            dotnet test "$t" \
              --configuration Release \
              --no-build \
              --collect:"XPlat Code Coverage" \
              --logger "trx;LogFileName=tests.trx"
          done

      - name: Install dotnet-format
        run: dotnet tool update -g dotnet-format

      - name: Check code style (dotnet-format)
        shell: bash
        run: |
          # Проверяем весь репозиторий; пишем отчёт и не роняем сборку (как с pylint || true)
          ~/.dotnet/tools/dotnet-format \
            --verify-no-changes \
            --report ./format.sarif \
            --verbosity diagnostic || true

      - name: Upload Test & Coverage Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-test-and-coverage
          path: |
            **/TestResults/**/*.trx
            **/TestResults/**/coverage.cobertura.xml
            format.sarif
